root@ubuntu-c-2-4gib-sgp1-01:~/js-playgroud# cat result.txt
yarn run v1.22.5
$ sh perf.sh
$ node src/node/perf.mjs
Standard Array Processing ARR_SIZE=1
native-ideal-while x 27,715,753 ops/sec ±0.28% (291 runs sampled)
native-standard-for-loop x 27,447,629 ops/sec ±0.47% (292 runs sampled)
native-fp x 12,027,764 ops/sec ±0.28% (292 runs sampled)
native-fp-optimized x 14,093,768 ops/sec ±0.30% (292 runs sampled)
native-fp-reduce-imperative x 14,942,780 ops/sec ±0.68% (284 runs sampled)
lodash-one-by-one x 19,529,649 ops/sec ±1.24% (279 runs sampled)
lodash-one-by-one-optimized x 19,517,957 ops/sec ±1.58% (280 runs sampled)
lodash-lazy-chain x 888,718 ops/sec ±0.27% (292 runs sampled)
lodash-lazy-chain-optimized x 2,030,477 ops/sec ±0.66% (287 runs sampled)
lodash-fp x 128,961 ops/sec ±4.41% (294 runs sampled)
lodash-fp-optimized x 191,249 ops/sec ±0.24% (293 runs sampled)
ramda x 389,648 ops/sec ±0.23% (293 runs sampled)
ramda-optimized x 476,296 ops/sec ±0.25% (292 runs sampled)
array-ext-native x 14,819,438 ops/sec ±0.55% (283 runs sampled)
array-ext-native-fp-optimized x 14,839,605 ops/sec ±0.54% (284 runs sampled)
array-ext-lodash-optimized x 370,836 ops/sec ±0.25% (294 runs sampled)
array-ext-ramda-optimized x 478,249 ops/sec ±0.38% (294 runs sampled)
lazy-sequence-native x 7,998,657 ops/sec ±0.38% (289 runs sampled)
lazy-sequence-lodash-optimized x 195,749 ops/sec ±0.67% (294 runs sampled)
lazy-sequence-ramda-optimized x 458,796 ops/sec ±0.31% (293 runs sampled)
Fastest is native-ideal-while
$ node src/node/perf.mjs
Standard Array Processing ARR_SIZE=10
native-ideal-while x 9,231,797 ops/sec ±0.42% (292 runs sampled)
native-standard-for-loop x 8,583,213 ops/sec ±0.48% (292 runs sampled)
native-fp x 2,680,979 ops/sec ±0.36% (293 runs sampled)
native-fp-optimized x 6,319,791 ops/sec ±0.34% (292 runs sampled)
native-fp-reduce-imperative x 7,091,321 ops/sec ±0.58% (290 runs sampled)
lodash-one-by-one x 1,815,469 ops/sec ±0.25% (293 runs sampled)
lodash-one-by-one-optimized x 4,337,338 ops/sec ±0.27% (292 runs sampled)
lodash-lazy-chain x 589,823 ops/sec ±0.29% (294 runs sampled)
lodash-lazy-chain-optimized x 1,575,677 ops/sec ±0.34% (292 runs sampled)
lodash-fp x 123,629 ops/sec ±5.57% (294 runs sampled)
lodash-fp-optimized x 181,515 ops/sec ±0.26% (293 runs sampled)
ramda x 271,647 ops/sec ±0.24% (294 runs sampled)
ramda-optimized x 334,174 ops/sec ±0.22% (293 runs sampled)
array-ext-native x 6,108,153 ops/sec ±0.30% (292 runs sampled)
array-ext-native-fp-optimized x 6,108,393 ops/sec ±0.55% (292 runs sampled)
array-ext-lodash-optimized x 341,406 ops/sec ±0.96% (292 runs sampled)
array-ext-ramda-optimized x 353,252 ops/sec ±0.26% (294 runs sampled)
lazy-sequence-native x 2,696,293 ops/sec ±0.33% (291 runs sampled)
lazy-sequence-lodash-optimized x 186,012 ops/sec ±0.66% (293 runs sampled)
lazy-sequence-ramda-optimized x 325,534 ops/sec ±0.23% (293 runs sampled)
Fastest is native-ideal-while
$ node src/node/perf.mjs
Standard Array Processing ARR_SIZE=100
native-ideal-while x 922,855 ops/sec ±0.23% (293 runs sampled)
native-standard-for-loop x 872,152 ops/sec ±0.33% (293 runs sampled)
native-fp x 335,527 ops/sec ±0.27% (294 runs sampled)
native-fp-optimized x 801,364 ops/sec ±0.25% (294 runs sampled)
native-fp-reduce-imperative x 920,023 ops/sec ±0.28% (293 runs sampled)
lodash-one-by-one x 253,413 ops/sec ±0.22% (294 runs sampled)
lodash-one-by-one-optimized x 505,631 ops/sec ±0.23% (293 runs sampled)
lodash-lazy-chain x 192,377 ops/sec ±0.28% (294 runs sampled)
lodash-lazy-chain-optimized x 425,727 ops/sec ±0.32% (294 runs sampled)
lodash-fp x 115,402 ops/sec ±0.16% (294 runs sampled)
lodash-fp-optimized x 140,748 ops/sec ±0.13% (294 runs sampled)
ramda x 81,628 ops/sec ±0.38% (292 runs sampled)
ramda-optimized x 85,634 ops/sec ±0.26% (294 runs sampled)
array-ext-native x 797,610 ops/sec ±0.33% (293 runs sampled)
array-ext-native-fp-optimized x 801,441 ops/sec ±0.29% (294 runs sampled)
array-ext-lodash-optimized x 209,614 ops/sec ±0.86% (294 runs sampled)
array-ext-ramda-optimized x 86,015 ops/sec ±0.25% (294 runs sampled)
lazy-sequence-native x 337,871 ops/sec ±0.26% (294 runs sampled)
lazy-sequence-lodash-optimized x 139,763 ops/sec ±0.43% (293 runs sampled)
lazy-sequence-ramda-optimized x 84,945 ops/sec ±0.25% (294 runs sampled)
Fastest is native-ideal-while
$ node src/node/perf.mjs
Standard Array Processing ARR_SIZE=1000
native-ideal-while x 95,695 ops/sec ±0.17% (293 runs sampled)
native-standard-for-loop x 92,665 ops/sec ±0.33% (289 runs sampled)
native-fp x 34,175 ops/sec ±0.30% (293 runs sampled)
native-fp-optimized x 82,789 ops/sec ±0.28% (293 runs sampled)
native-fp-reduce-imperative x 111,953 ops/sec ±1.17% (293 runs sampled)
lodash-one-by-one x 25,033 ops/sec ±0.26% (293 runs sampled)
lodash-one-by-one-optimized x 40,933 ops/sec ±0.24% (294 runs sampled)
lodash-lazy-chain x 24,240 ops/sec ±0.58% (294 runs sampled)
lodash-lazy-chain-optimized x 40,692 ops/sec ±0.18% (294 runs sampled)
lodash-fp x 40,040 ops/sec ±1.89% (294 runs sampled)
lodash-fp-optimized x 34,485 ops/sec ±0.36% (293 runs sampled)
ramda x 10,528 ops/sec ±0.28% (294 runs sampled)
ramda-optimized x 10,403 ops/sec ±0.15% (293 runs sampled)
array-ext-native x 80,671 ops/sec ±0.37% (292 runs sampled)
array-ext-native-fp-optimized x 80,735 ops/sec ±0.26% (290 runs sampled)
array-ext-lodash-optimized x 35,484 ops/sec ±0.36% (294 runs sampled)
array-ext-ramda-optimized x 10,507 ops/sec ±0.36% (294 runs sampled)
lazy-sequence-native x 33,702 ops/sec ±0.14% (294 runs sampled)
lazy-sequence-lodash-optimized x 34,333 ops/sec ±0.40% (293 runs sampled)
lazy-sequence-ramda-optimized x 10,464 ops/sec ±0.22% (294 runs sampled)
Fastest is native-fp-reduce-imperative
$ node src/node/perf.mjs
Standard Array Processing ARR_SIZE=10000
native-ideal-while x 6,603 ops/sec ±0.27% (289 runs sampled)
native-standard-for-loop x 6,677 ops/sec ±0.36% (292 runs sampled)
native-fp x 2,920 ops/sec ±0.51% (293 runs sampled)
native-fp-optimized x 5,912 ops/sec ±2.19% (292 runs sampled)
native-fp-reduce-imperative x 7,027 ops/sec ±2.82% (294 runs sampled)
lodash-one-by-one x 2,350 ops/sec ±0.25% (292 runs sampled)
lodash-one-by-one-optimized x 3,527 ops/sec ±0.24% (293 runs sampled)
lodash-lazy-chain x 2,331 ops/sec ±0.32% (292 runs sampled)
lodash-lazy-chain-optimized x 3,562 ops/sec ±0.21% (293 runs sampled)
lodash-fp x 4,411 ops/sec ±0.70% (293 runs sampled)
lodash-fp-optimized x 3,501 ops/sec ±0.34% (293 runs sampled)
ramda x 1,036 ops/sec ±0.13% (292 runs sampled)
ramda-optimized x 1,017 ops/sec ±0.27% (292 runs sampled)
array-ext-native x 6,137 ops/sec ±0.18% (289 runs sampled)
array-ext-native-fp-optimized x 6,152 ops/sec ±0.28% (289 runs sampled)
array-ext-lodash-optimized x 3,329 ops/sec ±0.30% (293 runs sampled)
array-ext-ramda-optimized x 1,019 ops/sec ±0.26% (291 runs sampled)
lazy-sequence-native x 3,100 ops/sec ±0.38% (293 runs sampled)
lazy-sequence-lodash-optimized x 3,506 ops/sec ±0.34% (293 runs sampled)
lazy-sequence-ramda-optimized x 1,022 ops/sec ±0.25% (292 runs sampled)
Fastest is native-fp-reduce-imperative
$ node src/node/perf.mjs
Standard Array Processing ARR_SIZE=100000
native-ideal-while x 513 ops/sec ±0.25% (287 runs sampled)
native-standard-for-loop x 517 ops/sec ±0.45% (284 runs sampled)
native-fp x 204 ops/sec ±0.73% (281 runs sampled)
native-fp-optimized x 325 ops/sec ±2.19% (285 runs sampled)
native-fp-reduce-imperative x 457 ops/sec ±3.08% (288 runs sampled)
lodash-one-by-one x 191 ops/sec ±0.78% (283 runs sampled)
lodash-one-by-one-optimized x 258 ops/sec ±0.56% (281 runs sampled)
lodash-lazy-chain x 188 ops/sec ±0.53% (282 runs sampled)
lodash-lazy-chain-optimized x 263 ops/sec ±0.61% (284 runs sampled)
lodash-fp x 281 ops/sec ±0.99% (284 runs sampled)
lodash-fp-optimized x 265 ops/sec ±0.73% (284 runs sampled)
ramda x 90.31 ops/sec ±1.35% (273 runs sampled)
ramda-optimized x 91.72 ops/sec ±1.28% (273 runs sampled)
array-ext-native x 381 ops/sec ±0.66% (282 runs sampled)
array-ext-native-fp-optimized x 377 ops/sec ±0.76% (282 runs sampled)
array-ext-lodash-optimized x 253 ops/sec ±0.58% (280 runs sampled)
array-ext-ramda-optimized x 91.41 ops/sec ±1.43% (273 runs sampled)
lazy-sequence-native x 264 ops/sec ±1.30% (284 runs sampled)
lazy-sequence-lodash-optimized x 264 ops/sec ±0.67% (284 runs sampled)
lazy-sequence-ramda-optimized x 91.49 ops/sec ±1.34% (273 runs sampled)
Fastest is native-standard-for-loop
$ node src/node/perf.mjs
Standard Array Processing ARR_SIZE=1000000
native-ideal-while x 30.20 ops/sec ±1.96% (224 runs sampled)
native-standard-for-loop x 30.87 ops/sec ±2.19% (225 runs sampled)
native-fp x 14.49 ops/sec ±2.69% (212 runs sampled)
native-fp-optimized x 19.36 ops/sec ±2.74% (216 runs sampled)
native-fp-reduce-imperative x 20.76 ops/sec ±1.56% (217 runs sampled)
lodash-one-by-one x 13.61 ops/sec ±2.79% (211 runs sampled)
lodash-one-by-one-optimized x 18.88 ops/sec ±2.77% (215 runs sampled)
lodash-lazy-chain x 13.97 ops/sec ±2.66% (211 runs sampled)
lodash-lazy-chain-optimized x 18.90 ops/sec ±2.99% (215 runs sampled)
lodash-fp x 17.68 ops/sec ±3.21% (214 runs sampled)
lodash-fp-optimized x 18.29 ops/sec ±3.13% (215 runs sampled)
ramda x 6.97 ops/sec ±0.95% (205 runs sampled)
ramda-optimized x 7.06 ops/sec ±1.56% (205 runs sampled)
array-ext-native x 23.18 ops/sec ±3.04% (219 runs sampled)
array-ext-native-fp-optimized x 23.05 ops/sec ±3.33% (219 runs sampled)
array-ext-lodash-optimized x 17.79 ops/sec ±3.07% (214 runs sampled)
array-ext-ramda-optimized x 6.98 ops/sec ±1.59% (205 runs sampled)
lazy-sequence-native x 16.19 ops/sec ±2.62% (213 runs sampled)
lazy-sequence-lodash-optimized x 18.51 ops/sec ±3.00% (214 runs sampled)
lazy-sequence-ramda-optimized x 6.93 ops/sec ±1.59% (205 runs sampled)
Fastest is native-standard-for-loop
